

git filter-repo


git filter-repo is a Git tool that helps you rewrite Git history ‚Äî safely and efficiently.
It replaces the older git filter-branch and BFG Repo-Cleaner.


You use it when you want to:

üö´ Remove sensitive data (like passwords or API keys) from your Git history

üßπ Remove large files to reduce repo size

üè∑ Rename folders or move files in all commits

üë§ Change commit authorship across all commits

üìÇ Split or merge repositories



Install pipx (if not installed)

sudo apt update
sudo apt install pipx -y
pipx ensurepath


check the version of the python.
python3 --version



install the pipx by the command 
sudo apt install pipx -y

now install the git filter-repo


Add pipx and git-filter-repo to PATH

Since it‚Äôs installed in /root/.local/bin, run this:
  export PATH="$PATH:/root/.local/bin"


  To make this permanent (so it works even after reboot), add it to your shell config:
    echo 'export PATH="$PATH:/root/.local/bin"' >> ~/.bashrc
source ~/.bashrc


verify installations
git filter-repo --version


Step 3 ‚Äî Let‚Äôs remove a file from history
For demonstration, let‚Äôs assume we want to remove debug.log (you can replace this with any file/folder later).
Run this command:
  git filter-repo --path debug.log --invert-paths --force


  Explanation:

--path debug.log ‚Üí target the file we want to remove

--invert-paths ‚Üí remove it from all commits (instead of keeping)

--force ‚Üí override the ‚Äúnot a fresh clone‚Äù safety check


After running this, run the following verification commands:
  # List files (should still show all working files, but debug.log is gone from history)
ls

# Check history for the file
git log --stat | grep debug.log


üìå Paste the output here so we can confirm that debug.log has been completely removed from all commits.



git filter-repo execution
Parsed 57 commits
New history written...
Completely finished after 0.07 seconds


This confirms that all 57 commits were scanned and the file debug.log was completely removed from history.
No trace of it exists in any commit anymore.


ls output
HEAD  branches  config  description  filter-repo  hooks  info  objects  packed-refs  refs

This is a bare mirror clone, so it doesn‚Äôt show working files like a normal repo.

That‚Äôs expected ‚Äî mirror clones store everything internally.


git log --stat | grep debug.log
No output ‚Äî ‚úÖ confirms the file was fully removed from all commits.


Next Step: Clean up old refs

After filtering, Git keeps backup references in .git/refs/original/ and pack files. We can remove them and compress the repo to finalize the cleanup.

Run these commands in the mirror clone:
  rm -rf refs/original/
git reflog expire --expire=now --all
git gc --prune=now --aggressive


After this, the repo is fully cleaned and ready.


Step 4 ‚Äî Optional: Push changes back to original repo

If you want to replace your original repo with this cleaned history, you can:

Go to your original repo (or create a new clone from this mirror):
  git clone /home/ubuntu/Git_Overall_Concepts_Repo_mirror Git_Overall_Concepts_Repo_Clean
cd Git_Overall_Concepts_Repo_Clean



Add the remote (if needed) and force push:
  git remote add origin https://github.com/Amit-4535/Git_Overall_Concepts_Repo.git
git push origin master --force




