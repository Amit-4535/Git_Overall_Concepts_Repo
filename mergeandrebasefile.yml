

Merge
Combines two branches, preserving their separate history
Rebase
Re-applies your branch commits on top of another branch, creating a linear history


ðŸŽ¯ When to Use
Use Case	                                  Preferred Operation
Public/shared branches (like main, develop)	âœ… merge (safe, non-destructive)
Local feature branch before PR           	âœ… rebase (clean history, linear commits)


git merge

check the merege and the rebase operations

git merge basically used to merge the one branch code/commitsID's to the other branch.

when you do the git merge then new commit id (merging commit ID will be gerating), 

note -- in the fast-forward concept merging commit will not be generating (both the branches will show you the current commit will be the pointing commitid)
fast forward means in whatever branch you are and trying to merge the commits, this branch is behind the newbranch (from which branch you are trying to merge).

in practicle scenario --> 

when you do the git merge then new merging commit will be generating
you will not get the linear history of the commit ids.

command to merge is -- git merge branchname

and you can check the detailed commit details by the command --  git log --graph â€“oneline




git rebase


git rebase is similar to the merge operation, but few changes are there.

this rebase operation is used to merge the changes from one branch to the another branch

when you do the rebase, you will not get the additional commit of the merging.

you will get the linear history of the commit message.

command --  git rebase branchname
